#!/bin/bash

# wp: do a bunch of stuff! 
# A bunch of scripts to aid in window-manager, ricing, profiling etc setup
# Note - lots of these functions are probably Mac-specific

_usage() {
    printf "wp: Tool for on-the-fly screen changes.\n"
    printf "Usage:\n"
    printf "\twp -w|--wallpaper FILE\t\tSet wallpaper to FILE, cache colors\n"
    printf "\twp -n|--new \t\t\tNew iTerm window with default profile\n"
    printf "\twp -r|--reload \t\t\tLoad space-specific colorscheme\n"
    printf "\twp -b|--both FILE\t\tSet wallpaper and reload colors\n"
    printf "\twp -f|--file NUMBER\t\tAttempt to load .cache/wal/sequences_NUMBER\n"
    printf "\t\t\t\t\t\tNote - reloading too soon might not work for complex images\n"
    printf "\twp -t|--transparency REAL\tSet transparency of terminal (0.0 to 1.0)\n"
    printf "\twp --tg|--transparency-get\tGet the current terminal's transparency (0.0 to 1.0)\n"
    # todo complete day/night/toggle
}

case "$1" in
    -w|--wallpaper)
        ~/.bin/unique_space.sh -w "$2"
        ;;
    -n|--new)
        ~/.bin/unique_space.sh -n
        ;;
    -r|--reload)
        ~/.bin/unique_space.sh -r
        ;;
    -b|--both)
        $0 -w "$2"
        sleep 1
        $0 -r
        ;;
    -f|--file)
        cat ~/.cache/wal/sequences_"$2"
        ;;
    -t|--transparency)
        osascript -e "tell application \"iTerm\" to tell current window to tell current session to set transparency to $2"
        ;;
    --tg|--transparency-get)
        # NOTE - cmd+u makes an iTerm window opaque?
        osascript -e 'tell application "iTerm" to tell current window to tell current session to get transparency'
        ;;
    --day)
        # Instead should progressively set Flux temp higher to ease transition
        killall Flux &> /dev/null
        # if Flux doesn't set to dark mode, don't need this toggle
        #khd -p "cmd + alt + ctrl - t"

        export NIGHT=0
        #return 0
        ;;
    --night)
        open -a Flux
        # change colorshemes (?) and wallpapers

        export NIGHT=1
        #return 0
        ;;
    --toggle)
        if [[ -z "$NIGHT" ]]; then
            export NIGHT=1
        fi

        if [[ "$NIGHT" ]]; then
            NIGHT=1
            day
        else
            NIGHT=0
            night
        fi
        ;;
    --bonsai)
        ~/.bin/bonsai.sh
        ;;
    --coffee)
        ~/.bin/coffee.sh
        ;;
    --termcolors)
        # Display terminal ANSI colors
        # Print numbers
        echo -en "    \t"
        for i in {0..7}; do echo -en "  ${i}    \t"; done; echo

        # Print regular colors
        echo -en "reg:\t"
        for i in {0..7}; do echo -en "\033[0;3${i}m▉▉▉▉▉▉▉\t"; done; echo; echo

        # Print alternate colors
        echo -en "alt:\t"
        for i in {0..7}; do echo -en "\033[1;3${i}m▉▉▉▉▉▉▉\t"; done; echo
        ;;
    -h|--help)
        _usage
        ;;
    *)
        printf "Not supported: ""$1\n"
        _usage
        ;;
esac
