"""
" General plugin settings and keybinds
"""


" treesitter
lua <<EOF
require'nvim-treesitter.configs'.setup {
  -- "all"  | {"list of languages"}
  ensure_installed = "all",
  ignore_install = { "phpdoc", "php" },
  sync_install = false,

  highlight = {
    enable = true,
    disable = {},
    additional_vim_regex_highlighting = false,
  },

  incremental_selection = {
      -- default keymaps: init / node inc / scope inc / node dec
      -- gnn / grn / grc / grm
      enable = true,
      keymaps = {
          init_selection = "<M-n>",
          node_incremental = "<M-n>",
          scope_incremental = "<M-p>",
          node_decremental = "<M-i>",
      }
  },

  indent = {
      enable = false,
  },

  -- provided by nvim-treesitter-textobjects plugin
  textobjects = {
      select = {
          enable = true,

          -- automatically jump forward to textobj
          lookahead = true,

          keymaps = {
              ["af"] = "@function.outer",
              ["if"] = "@function.inner",
              ["ac"] = "@class.outer",
              ["ic"] = "@class.inner",
          },
      },

      -- todo: neovim provides mappings for jumping over functions
      -- [[, ]], [m, ]M,
      -- should i add these as text object movements, or keep them as nvim-provided?
      move = {
          enable = true,
          set_jumps = true,
          goto_next_start = {
              ["]a"] = "@parameter.inner",
          },
          goto_next_end = {
              ["]A"] = "@parameter.outer",
          },
          goto_previous_start = {
              ["[a"] = "@parameter.inner",
          },
          goto_previous_end = {
              ["[A"] = "@parameter.outer",
          },
      },

      swap = {
          enable = true,
          swap_next = {
              ["<leader>a"] = "@parameter.inner",
          },
          swap_previous = {
              ["<leader>A"] = "@parameter.inner",
          },
      },
  },

  -- provided by p00f/nvim-ts-rainbow
  rainbow = {
      enable = true,
      extended_mode = true,
  },
}
EOF


" nvim-lspconfig
" put some LSP actions in right-click popup menu
unmenu PopUp.Paste
unmenu PopUp.Select\ All
unmenu PopUp.-1-
unmenu PopUp.How-to\ disable\ mouse
anoremenu PopUp.Diagnostic :lua vim.diagnostic.open_float()<CR>
anoremenu PopUp.Rename :lua vim.lsp.buf.rename()<CR>
anoremenu PopUp.TypeDefinition :lua vim.lsp.buf.type_definition()<CR>


" popup lsp_signature automatically
lua require('lsp_signature').setup({ bind = true })


" use color 2 for the new window border
lua require('colorful-winsep').setup()
hi NvimSeparator ctermfg=2


" gitsigns
lua require('gitsigns').setup({
\    numhl = true,
\    current_line_blame = true,
\    current_line_blame_opts = {delay = 500},
\ })

" make a changed line more obvious when diagnostics are on that line
" (this changes the line number color of the line)
highlight GitSignsChangeNr ctermfg=white
highlight link GitSignsCurrentLineBlame String

nmap ]h :Gitsigns next_hunk<CR>zz
nmap [h :Gitsigns prev_hunk<CR>zz

nmap <leader>hs :Gitsigns stage_hunk<CR>
vmap <leader>hs :'<'>Gitsigns stage_hunk<CR>
nmap <leader>hr :Gitsigns reset_hunk<CR>
vmap <leader>hr :'<'>Gitsigns reset_hunk<CR>
nmap <leader>hu :Gitsigns undo_stage_hunk<CR>
nmap <leader>hp :Gitsigns preview_hunk<CR>
nmap <leader>hd :Gitsigns diffthis<CR>
nmap <leader>hD :Gitsigns diffthis ~1<CR>
nmap yog :Gitsigns toggle_current_line_blame<CR>


" python info - is this still required?
" gtfo py2
let g:python_host_prog=''
{{ if (eq .chezmoi.os "darwin") -}}
{{ if (eq .chezmoi.arch "arm64") -}}
let g:python3_host_prog='/opt/homebrew/bin/python3'
{{ else -}}
let g:python3_host_prog='/usr/local/bin/python3'
{{- end }}
{{ else if (eq .chezmoi.os "linux") -}}
let g:python3_host_prog='/usr/bin/python3'
{{- end }}


" mappings for Linediff
vnoremap <leader>d	:Linediff<CR>


" vimwiki settings
let wiki_1 = {}
let wiki_1.path = '~/Dropbox/wiki/'
"let wiki_1.html_template = '~/public_html/template.tpl'
"let wiki_1.nested_syntaxes = {'python': 'python', 'c++': 'cpp'}

let wiki_2 = {}
let wiki_2.path = '~/Documents/Personal/work_wiki/'
"let wiki_2.index = 'main'

let g:vimwiki_list = [wiki_1, wiki_2]


" vim-minimap settings
let g:minimap_show='<leader>ms'
let g:minimap_update='<leader>mu'
let g:minimap_close='<leader>gc'
let g:minimap_toggle='<leader>gt'


""""
" don't know about merging this stuff, don't use latex much anymore?
"
" vim-latex-live-preview
let g:livepreview_previewer = 'evince'
nnoremap <leader>L :LLPStartPreview<CR>
" live previewing currently broken?
"autocmd TextChanged,TextChangedI *tex silent :LLPStartPreview 

" latex live stuff
" update time
autocmd Filetype tex setl updatetime=5
nnoremap <F12> :LLPStartPreview<CR>

" change from default evince
" actually i think evince is fine?
"let g:livepreview_previewer = 'mupdf'

""""


" CamelCaseMotion settings
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie


" leap.nvim
lua require('leap').add_default_mappings()
highlight link LeapBackdrop Comment
highlight LeapLabelPrimary ctermfg=White ctermbg=Black
highlight LeapLabelSecondary ctermfg=Red ctermbg=White


" setup flit
lua require('flit').setup({
\    labeled_modes = "n",
\        special_keys = {
\            repeat_search = { "<Enter>" },
\        },
\    opts = {
\        special_keys = {
\            repeat_search = { "<Enter>" },
\        }
\    },
\ })

lua require('leap-spooky').setup({
\    paste_on_remote_yank = true,
\    })


" hlslens - immediately search selected text with * or #
" (note this is more powerful than builtin "search word")
lua <<EOF
local hlslens = require('hlslens')

hlslens.setup {
  calm_down = false,
  nearest_only = true,
  virt_priority = 10,
}

vim.keymap.set("n", "*", "", {
  callback = function()
    vim.fn.execute("normal! *N")
    hlslens.start()
  end,
})

vim.keymap.set("n", "#", "", {
  callback = function()
    vim.fn.execute("normal! #N")
    hlslens.start()
  end,
})
EOF


" telescope searching
lua <<EOF
local actions = require("telescope.actions")
require("telescope").setup{
  defaults = {
    -- trim leading space from matches
    vimgrep_arguments = {
      "rg",
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
      "--smart-case",
      "--trim" -- add this value
    },
    mappings = {
      i = {
        ["<esc>"] = actions.close,
        ["<C-u>"] = false
      },
    },
    extensions = { fzf },
  }
}

require('telescope').load_extension('fzf')

-- try to find git_files; otherwise fall back to regular find_files
project_files = function()
  local opts = {} -- define here if you want to define something
  local ok = pcall(require"telescope.builtin".git_files, opts)
  if not ok then require"telescope.builtin".find_files(opts) end
end

vim.api.nvim_set_keymap("n", "<c-p>", "<CMD>lua project_files()<CR>", {noremap = true, silent = true})
vim.api.nvim_set_keymap("n", "<c-f>", "<CMD>Telescope live_grep<CR>", {noremap = true, silent = true})
vim.api.nvim_set_keymap("n", "<Tab>", "<CMD>Telescope buffers<CR>", {noremap = true, silent = true})
EOF


" LSP Diagnostics - better signs
sign define DiagnosticSignError text=x
sign define DiagnosticSignWarn text=!
sign define DiagnosticSignInfo text=>
sign define DiagnosticSignHint text=?

" update quickfix
" in addition to nvim-cmp []d bindings for moving, can still use []q from
" vim-unimpaired if that's more comfortable
autocmd DiagnosticChanged * lua vim.diagnostic.setqflist({open = false})

let s:DiagnosticsShown = get(s:, 'DiagnosticsShown', 1)
function! ToggleVimDiagnostic()
    if s:DiagnosticsShown == 1
        lua vim.diagnostic.config({virtual_text = false, underline = false})
        let s:DiagnosticsShown = 0
    else
        lua vim.diagnostic.config({virtual_text = true, underline = true})
        let s:DiagnosticsShown = 1
    endif
endfunction

" let 'yoe' still show gutter diagnostic signs; ']oe' will hide entirely
nnoremap yoe :call ToggleVimDiagnostic()<CR>
nnoremap [oe :lua vim.diagnostic.show()<CR>
nnoremap ]oe :lua vim.diagnostic.hide()<CR>

lua require('Comment').setup()
