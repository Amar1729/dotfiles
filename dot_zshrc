# Amar Paul's zshrc

export TERM="xterm-256color"
export EDITOR="nvim"

# Load all stock functions (from $fpath files) called below.
autoload -Uz compinit

# disable 'git status' looking for untracked files in my zsh prompt
# (i would like this to be configurable on the fly somehow)
# has to exported before loading plugins
# double-check this: i'm actually not sure if this works with my theme currently

# we're going to default to untracking these (speed up creation of new shells)
export DISABLE_UNTRACKED_FILES_DIRTY=true

# use async for autosuggestions
export ZSH_AUTOSUGGEST_USE_ASYNC=1

# plugins: moving to antibody from antigen
ANTIBODY_HOME="$(antibody home)"
DISABLE_AUTO_UPDATE="true"

# for now use omz for better completions: todo remove this BLOAT
export ZSH="$ANTIBODY_HOME"/https-COLON--SLASH--SLASH-github.com-SLASH-robbyrussell-SLASH-oh-my-zsh
export _Z_DATA="$HOME/.cache/z"

# statically load plugins. generate with:
# antibody bundle < ~/.zsh_plugins.txt > ~/.zsh_plugins.zsh
source ~/.zsh_plugins.zsh

# User configuration

# PATH changes
[[ -r ~/.profile ]] && source ~/.profile

# shell aliases
[[ -r ~/.shell_aliases ]] && source ~/.shell_aliases

# a few zsh-specific aliases

alias dh='dirs -v'

# filter on bool $f: needs to be expanded inline to work
alias _filter='for f in ${arr[@]}; do if func $f &>/dev/null; then echo $f; fi; done'

# commands for which zsh globbing gets in the way
alias curl='noglob curl'
alias wget='noglob wget'
alias git='noglob git'

# zsh options

# autopushd         : make cd act like pushd (alias doesn't work properly)
# pushdminus        : use -1 instead of +1
# pushdsilent       : prevents printing stack on each cd
# pushdtohome       : `pushd` to ~/
# pushdignoredups   : dont add duplicates to stack
DIRSTACKSIZE=8
setopt autopushd pushdminus pushdsilent pushdtohome pushdignoredups

# better globs
setopt extendedglob

# allow comments (i.e. ending with '#')
setopt interactivecomments

# History

HISTCONTROL=ignoreboth
HISTFILESIZE=1000000
HISTSIZE=10000000           # number of history lines kept internally
SAVEHIST=10000000           # max number of history lines saved
setopt APPEND_HISTORY       # history appends to existing file
setopt HIST_REDUCE_BLANKS   # trim multiple insgnificant blanks in history
setopt HIST_IGNORE_ALL_DUPS # ignore ALL duplicates (even if not immediately previous)
setopt histignoredups       # ignore duplicates during search

# ignore if beginning with space
setopt HIST_IGNORE_SPACE
setopt HIST_NO_STORE

# save time and how long cmd ran
setopt EXTENDED_HISTORY

# zsh: other look-and-feel, configs, aliases

# don't write invalid commands into history (they are still cached locally)
# wip: _also_ ignore failed cmds?
zshaddhistory () {
	if whence ${${(z)1}[1]} >| /dev/null; then
		# blacklist certain commands from history
		if [[ ${${(z)1}[1]} =~ "^(pass|z)$" ]]; then
			return 1
		fi
	else
		return 1
	fi
}

# auto-source virtualenvs
chpwd_venv () { [[ -r ./venv/bin/activate ]] && source ./venv/bin/activate }
chpwd_git_size () {
	if GIT=$(git rev-parse --git-dir 2>/dev/null); then
		SIZE=$(du -s "${GIT}" | awk '{print $1}')

		if [[ $SIZE -gt 2000000 ]]; then
			export DISABLE_UNTRACKED_FILES_DIRTY=true
		else
			export DISABLE_UNTRACKED_FILES_DIRTY=false
		fi
	fi
}

chpwd () {
	chpwd_venv
	chpwd_git_size
}

# newlines before and after command output
precmd () { print '' }
preexec () { print '' }

# some custom completions, and make sure $fpath gets loaded properly
fpath+=~/.zsh/completions
fpath+=${HOMEBREW_PREFIX}/share/zsh/site-functions

# https://gist.github.com/ctechols/ca1035271ad134841284
# (if we modify fpath ourselves, compinit should be done AFTER)
if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
	compinit -i
else
	compinit -C
fi

# omz conflicts with common user alias mcd
compdef -d mcd

# case- and hyphen-insensitive matching
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=* r:|=*'

zstyle ':completion:*' menu select
zmodload zsh/complist

# bindkey mappings, custom functions, and notes
# use ^Xa to expand aliases

# alt+, mirrors alt+. (insertion of command from last line vs insertion of last arg from last cmd)
insert-first-word () { zle insert-last-word -- -1 1 }
zle -N insert-first-word
bindkey '^[,' insert-first-word

# Use ctrl-p/n for up/down arrow (instead of default prev/next cmds)
bindkey "^P" up-line-or-beginning-search
bindkey "^N" down-line-or-beginning-search

# temporarily clear cmd so i can inspect, ls, man, etc
bindkey "^q" push-line-or-edit

# override ^U to also copy to clipboard
copy-and-kill-whole-line () {
    printf "%s" "$BUFFER" | pbcopy
    zle kill-whole-line
}
zle -N copy-and-kill-whole-line
bindkey "^U" copy-and-kill-whole-line

# shift line by one space (helpful for avoiding history)
bindkey -s "^[>" '^e^a ^e'

# for hardcore scripting: surround line with $()
bindkey -s "^[o" '^a$(^e)^a'

# save output
bindkey -s "^o" '> output.txt'

# easier echo to a cmd
bindkey -s "^X^G^O" "^aecho '^e'"

# Upon menu completion, enter directories with ctrl-o
bindkey -M menuselect "^o" accept-and-infer-next-history

# use the vi navigation keys in menu completion
bindkey -M menuselect "h" vi-backward-char
bindkey -M menuselect "k" vi-up-line-or-history
bindkey -M menuselect "l" vi-forward-char
bindkey -M menuselect "j" vi-down-line-or-history

# plugin-specific
bindkey "^ " autosuggest-execute

# dynamic colors with (a wrapper for) pywal!
#(wp -r &)
(cat $HOME/.cache/wal/sequences &)
